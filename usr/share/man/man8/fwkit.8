.TH fwkit 8
.SH NAME
fwkit \- Firewall Kit for modular firewalls
.SH SYNOPSIS
\fBfwkit rules\fR { \fBclean\fR | \fBcompile\fR | \fBload\fR | \fBreload\fR | \fBunload\fR }
.br
\fBfwkit service apply \fIzone\fR { \fBlocal\fR | \fBremote\fR } \fIservice\fR \fIacl\fR
.br
\fBfwkit service\fR { \fBdisable\fR | \fBenable\fR } { \fBlocal\fR | \fBremote\fR } \fIservice\fR ...
.br
\fBfwkit service list\fR [ \fIzone\fR ]
.br
\fBfwkit service\fR { \fBclear\fR | \fBshow\fR } \fIzone\fR { \fBlocal\fR | \fBremote\fR } \fIservice\fR
.br
\fBfwkit role\fR { \fBget\fR | \fBlist\fR }
.br
\fBfwkit role set \fIname\fR
.br
\fBfwkit role\fR \fBdefine\fR \fIname\fR [ \fBallow\fR | \fBdeny\fR ] [ \fIdescription\fR ]
.br
\fBfwkit role\fR \fBundefine\fR \fIname\fR
.br
\fBfwkit zone\fR \fBdefine\fR \fIname source\fR [ \fIdescription\fR ]
.br
\fBfwkit zone\fR \fBundefine\fR \fIname\fR
.br
\fBfwkit zone list\fR
.br
\fBfwkit acl\fR { \fBdefine\fR } \fIname\fR [ \fBallow\fR | \fBdeny\fR ]
.br
\fBfwkit acl\fR { \fBedit\fR | \fBshow\fR | \fBundefine\fR } \fIname\fR
.br
\fBfwkit acl\fR { \fBlist\fR }
.br
\fBfwkit config get\fR [ \fIvar\fR ]
.br
\fBfwkit config set \fIvar value\fR
.br
\fBfwkit config unset \fIvar\fR
.SH DESCRIPTION
fwkit is primarily designed around the concept of roles, zones, and services. Roles maintain a collection of enabled services for one or more zones. A ruleset is compiled based on the services enabled for the active role. Roles can be customized to suit any need. An example role is included by default.
.SH OPTIONS
.TP
.B rules
Rule management.
.RS
.TP .4i
.B clean
Remove any compiled or cached rules.
.TP .4i
.B compile
Prepare the ruleset for loading.
.TP .4i
.B load
Load the ruleset. If a cached rulset is available, load it. If a compiled ruleset is available, load it, otherwise compile it first.
.TP .4i
.B reload
A shortcut for running \fBunload\fR, \fBclean\fR, \fBcompile\fR, \fBload\fR.
.TP .4i
.B unload
Unload the rulset. The live ruleset is cached using
.BR iptables-save (8).
.RE
.TP
\fBservice\fR|\fBservices\fR
Service management.
.RS
.TP .4i
\fBapply\fR \fIzone\fR { \fBlocal\fR | \fBremote\fR } \fIservice\fR \fIacl\fR
Apply the ACL \fIacl\fR to \fBlocal\fR or \fBremote\fR \fIservice\fR in \fIzone\fR.
.TP .4i
\fBclear\fR \fIzone\fR { \fBlocal\fR | \fBremote\fR } \fIservice\fR
Clear any ACL from \fBlocal\fR or \fBremote\fR \fIservice\fR in \fIzone\fR.
.TP .4i
\fBdisable\fR { \fBlocal\fR | \fBremote\fR } \fIservice\fR ...
Disable a \fBlocal\fR or \fBremote\fR \fIservice\fR. More than one service can be specified. Service names can be \fIzone\fR:\fIservice\fR, or simply \fIservice\fR in which case the \fBdefault\fR zone is assumed.
.TP .4i
\fBenable\fR { \fBlocal\fR | \fBremote\fR } \fIservice\fR ...
Enable a \fBlocal\fR or \fBremote\fR \fIservice\fR. More than one service can be specified. See above.
.TP .4i
\fBlist\fR [ \fIzone\fR ]
List all services along with their state (enabled or disabled) for \fIzone\fR. If no zone is specified, the assume the \fBdefault\fR zone.
.TP .4i
\fBshow\fR \fIzone\fR { \fBlocal\fR | \fBremote\fR } \fIservice\fR
Show the details of \fBlocal\fR or \fBremote\fR \fIservice\fR in \fIzone\fR.
.RE
.TP
\fBrole\fR|\fBroles\fR
Role management.
.RS
.TP .4i
.B get
Get the current role.
.TP .4i
.B list
List the available roles. The active role is marked with an asterisk.
.TP .4i
\fBset \fIname\fR
Set the active role to \fIname\fR.
.TP .4i
\fBdefine \fIname\fR [ \fBallow\fR | \fBdeny\fR ] [ \fIdescription\fR ]
Define a new role \fIname\fR, with a default policy of \fBallow\fR or \fBdeny\fR and optional description \fIdescription\fR.
.TP .4i
.B undefine
Undefine (delete) an existing role \fIname\fR.
.RE
.TP
\fBzone\fR|\fBzones\fR
Zone management.
.RS
.TP .4i
\fBdefine \fIname source\fR [ \fIdescription\fR ]
Define a new zone \fIname\fR for the currently enabled role, from network or host address \fIsource\fR, with optional description \fIdescription\fR.
.TP .4i
\fBundefine \fIname
Undefine an existing zone \fIname\fR for the currently enabled role.
.TP .4i
.B list
List the zones for the currently enabled role.
.RE
.TP
.B config
Configuration management. Configuration variables consist of two classes: \fBcore\fR and \fBvars\fR. \fBcore\fR variables are used internally by fwkit to modify it's behaviour. \fBvars\fR are made available to the ruleset and are used to allow for more dynamic configuration. \fIvar\fR refers to the full variable name, i.e.
\fIclass\fR.\fIname\fR. The \fIname\fR portion can only contain numbers, letters, and underscores.  Examples of variable names are: \fBcore.interpreter\fR, \fBvars.foo_bar\fR, \fBvars.funkyChicken\fR.
.RS
.TP .4i
\fBget \fI[ \fIvar\fR ]
Get the value of configuration variable \fIvar\fR.
.TP .4i
\fBset \fIvar\fR \fIvalue\fR
Set the value of configuration variable \fIvar\fR to \fIvalue\fR.
.TP .4i
\fBunset \fIvar\fR
Unset the configuration variable \fIvar\fR.
.RE
.TP
\fBacl\fR|\fBacls\fR
ACL management.
.RS
.TP .4i
\fBdefine \fIname\fR [ \fBallow\fR | \fBdeny\fR ]
Define a new ACL \fIname\fR, setting it's default action to \fBallow\fR or \fBdeny\fR.
.TP .4i
\fBedit \fIname\fR
Launch an editor to manually edit the ACL entries for \fIname\fR.
.TP .4i
\fBlist\fR
List all defined ACLs.
.TP .4i
\fBshow\fR \fIname\fR
Show the contents of ACL \fIname\fR.
.TP .4i
\fBundefine\fR \fIname\fR
Undefine (delete) the ACL \fIname\fR.
.RS
.SH ZONE MANAGEMENT
Roles are created with a single zone called "default". Additional zones can be defined for a role to segment traffic from differnet networks and/or interfaces, allowing services to be enabled or disabled independently for these segments. For example:
.P
.in +7
fwkit zone define lan 192.168.0.0/24
.br
fwkit services enable local lan:ssh lan:smb lan:dhcp
.P
When services are enabled or disable for a zone other then the "default" zone, they must be prepended with the zone name followed by a colon ":".
.P
Zone definitions are loaded in the the order that \fBls(1)\fR produces, except that the "default" zone (if it exists) is always loaded last. Custom zone ordering is possible by adding the zones (one per line) to \fI/etc/fwkit/role.active/zoneorder\fR. Once \fIzoneorder\fR is defined, only the zones listed in that file are loaded.
.SH SIMPLE PORT FOWARDING
fwkit provides a convenient shorcut for defining port forwarding configurations. \fBvars\fR-class variables beginning with \fBdnat_\fR are treated by the ruleset as port-forwarding definitions and the appropriate rules are generated to execute the definition. A port forwarding definition is as follows:
.P
.in +7
{ \fBtcp\fR | \fBudp\fR } / [ \fIsrc\fR ] \fB:\fIsrcport\fR / \fIdst\fR [ \fB:\fIdstport\fR ]
.RS
.TP .4i
.I src
The source IP address. This is optional, and if omitted all source IP's will match.
.TP .4i
.I srcport
The source port number.
.TP .4i
.I dst
The destination IP address.
.TP .4i
.I dstport
The destination port number. This is optional, and if omitted \fIsrcport\fR will be used.
.RE
.P
To redirect SSH connections on port 2202 to the local daemon listening on localhost port 22, the port forwarding definition would look like:
.P
.in +7
tcp/:2202/127.0.0.1:22
.P
To create the port-forward definition above, set the configuration variable and then reload the ruleset:
.P
.in +7
fwkit config set vars.dnat_ssh tcp/:2202/127.0.0.1:22
.br
fwkit rules reload
.P
.in -7
.SH FILES
.TP
/etc/fwkit/roles/\fIrole\fR/policy.rules
If it exists, it overrides the roles defined policy. Policies are set before other rules are loaded, so this file provides a way to configure more complicated policies.
.TP
/etc/fwkit/rules.d/pre/*.rules
Files containing rules to be included before service definitions.
.TP
/etc/fwkit/rules.d/post/*.rules
Files containing rules to be included after service definitions.
.TP
/etc/fwkit/services/local/*.service
Local service definitions.
.TP
/etc/fwkit/services/remote/*.service
Remote service definitions.
.SH SEE ALSO
/usr/share/fwkit/Readme.md
.SH AUTHOR
Matt Ferris <matt@bueller.ca>
