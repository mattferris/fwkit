#!/bin/sh

myname=$( basename $0 )

etcdir=/etc/fwkit
libdir=/var/lib/fwkit

mode=$1
action=$2

if [ ! -z "$FWKIT_ETCDIR" ]; then
    etcdir=$FWKIT_ETCDIR
fi

if [ ! -z "$FWKIT_LIBDIR" ]; then
    libdir=$FWKIT_LIBDIR
fi

confload() {
    type=$1
    prefix=$2
    for i in $(find "$etcdir/conf/$type" -type f); do
        name=$(basename $i)
        eval "export $prefix$name=\"$(cat $i)\""
    done
}

confenv() {
    type=$1
    prefix=$2
    for i in $(find "$etcdir/conf/$type" -type f); do
        name=$(basename $i)
        value=$(eval echo $(cat $i))
        echo -n "$prefix$name=$value "
    done
}

doerror() {
    echo "error: $2" 1>&2
    exit $1
}

donotice() {
    echo "notice: $1" 1>&2
}

doservice() {
    zone=$1
    location=$2
    service=$3
    servfile="$etcdir/role.active/zones/$zone/services/$location/$service.service"
    echo "\n#\n# $i\n#\n"
    if [ -x "$servfile" ]; then
        "$servfile" $zone local
    else
        cat "$servfile"
    fi
    doacl $zone $location $service
}

doacl() {
    zone=$1
    location=$2
    service=$3
    aclfile="$etcdir/role.active/zones/$zone/services/$location/$service.service.acl"
    chain=$(echo "fwk_${zone}_$(echo $location | cut -b1)_${service}" | cut -b1-30)
    if [ -f "$aclfile" ]; then
        { while read line; do
            action=$(echo $line | cut -d\  -f1)
            source=$(echo $line | cut -d\  -f2)
            cmt=$(echo $line | cut -d\  -f3-)
            negated=""
            if [ ! -z $(echo $source | grep -e '^!') ]; then
                negated="'!'"
                source=$(echo $source | cut -b2-)
            fi
            target="DROP"
            cmd="iptables"
            [ "allow" = "$action" ] && target="ACCEPT"
            [ ! -z $(echo $source | grep ':') ] && cmd="ip6tables"
            [ ! -z "$cmt" ] && cmt='-m comment --comment "$cmt"'
            echo "$cmd -A $chain $negated -s $source -j $target"
        done } < "$aclfile"
    else
        echo "iptables -A $chain -s 0.0.0.0/0 -j ACCEPT"
        echo "ip6tables -A $chain -s ::0/0 -j ACCEPT"
    fi
}

servenabled() {
    zone=$1
    location=$2
    service=$3

    # does zone exist
    zonedir="$etcdir/role.active/zones/$zone"
    [ ! -d "$zonedir" ] && doerror 1 "invalid zone specified '$zone', zone doesn't exist"

    # is location valid
    [ ! "$location" = "local" -a ! "$location" = "remote" ] \
        && doerror 1 "invalid location specified '$localtion', must be 'local' or 'remote'"

    # is service enabled
    servfile="$zonedir/services/$location/$service.service"
    [ ! -f "$servfile" ] && doerror 1 "invalid $location service specified '$service', service not enabled"
}

confload core core_

case $mode in

    rules)

        #
        # All actions related to rules mode
        #
        case $action in

            clean)
                for i in $( ls -1 "$libdir" ); do
                    rm "$libdir/$i"
                done
	        ;;

            compile)
                if [ -f "$libdir/compile.tmp" ]; then
                    rm "$libdir/compiled.tmp"
                fi

                if [ ! -d "$etcdir" ]; then
                    doerror 1 "config directory $etcdir doesn't exist or isn't a directory"
                fi

                if [ ! -e "$etcdir/role.active" ]; then
                    doerror 1 "no role specified"
                fi

                # include role policy if it exists
                policy="$etcdir/role.active/policy.rules"
                if [ -f "$policy" ]; then
                    echo "#\n# $policy\n#\n" >> $libdir/compiled.tmp
                    cat "$policy" >> "$libdir/compiled.tmp"
                fi

                # include pre-service rules
                if [ -d "$etcdir/rules.d/pre" ]; then
                    for i in $( find "$etcdir/rules.d/pre" -name "*.rules" ); do
                        echo "\n#\n# $i\n#\n" >> $libdir/compiled.tmp
                        cat "$i" >> "$libdir/compiled.tmp"
                    done
                fi

                # process zones
                for zone in $( ls -1 "$etcdir/role.active/zones" ); do
                    zonedir="$etcdir/role.active/zones/$zone"

                    defaction="deny"
                    if [ -f "$zonedir/default_action" ]; then
                        defaction=$(cat $zonedir/default_action)
                    fi

                    echo "iptables -N $zone" >> "$libdir/compiled.tmp"
                    echo "ip6tables -N $zone" >> "$libdir/compiled.tmp"

                    if [ "allow" = "$defaction" ]; then
                        echo "iptables -P $zone ACCEPT" >> "$libdir/compiled.tmp"
                        echo "ip6tables -P $zone ACCEPT" >> "$libdir/compiled.tmp"
                    else
                        echo "iptables -P $zone DROP" >> "$libdir/compiled.tmp"
                        echo "ip6tables -P $zone DROP" >> "$libdir/compiled.tmp"
                    fi

                    if [ ! -f "$zonedir/sources" ]; then
                        doerror 1 "no sources defined for zone '$zone'"
                    fi

                    { while read i; do
                        cmd=""
                        if [ -z "$i" ]; then
                            continue;
                        fi
                        if [ -z $(echo $i | grep -e ':') ]; then
                            cmd="iptables"
                        else
                            cmd="ip6tables"
                        fi
                        echo "$cmd -s $i -j $zone" >> "$libdir/compiled.tmp"
                    done } < "$zonedir/sources"

                    # include local service rules
                    locsrv="$zonedir/services/local"
                    if [ -d "$locsrv" ]; then
                        for i in $( find "$locsrv" -name "*.service" ); do
                            servname=$( echo $(basename $i) | sed 's/.service//' )
                            doservice $zone local $servname >> "$libdir/compiled.tmp"
                        done
                    fi

                    # include remote service rules
                    rmtsrv="$zonedir/services/remote"
                    if [ -d "$rmtsrv" ]; then
                        for i in $( find "$rmtsrv" -name "*.service" ); do
                            servname=$( echo $(basename $i) | sed 's/.service//' )
                            doservice $zone remote $servname >> "$libdir/compiled.tmp"
                        done
                    fi
                done

                # include post-service rules
                if [ -d "$etcdir/rules.d/post" ]; then
                    for i in $( find "$etcdir/rules.d/post" -name "*.rules" ); do
                        echo "\n#\n# $i\n#\n" >> $libdir/compiled.tmp
                        cat "$i" >> "$libdir/compiled.tmp"
                    done
                fi

                if [ ! -f "$libdir/compiled.tmp" ]; then
                    donotice "no rules found!"
                fi

                mv "$libdir/compiled.tmp" "$libdir/compiled.rules"

                if [ -f "$libdir/cached.rules" ]; then
                    rm "$libdir/cached.rules"
                fi

                echo "compiled rules into $libdir/compiled.rules"
                ;;

            load)
                if [ -f "$libdir/cached.rules" ]; then
                    echo -n "loading cached rules..."
                    /sbin/iptables-restore < "$libdir/cached.rules"
                    echo "done"
                else
                    if [ ! -f "$libdir/compiled.rules" ]; then
                        $0 rules compile
                    fi

                    echo -n "loading compiled rules..."

                    (
                        # get interface values
                        ip -4 -o addr | grep inet | {
                            while read def; do
                                if=$(echo $def | cut -d' ' -f2)
                                net=$(echo $def | awk '{print $4}')
                                addr=$(echo $net | cut -d/ -f1)
                                eval "export if_${if}_net=\"$net\""
                                eval "export if_${if}_addr=\"$addr\""
                            done

                            env -i FWKIT_ETCDIR=$etcdir FWKIT_LIBDIR=$libdir fwkit=$0 $(confenv vars) $core_interpreter "$libdir/compiled.rules"
                        }
                    )

                    echo "done"
                fi
                ;;

            reload)
                $0 rules unload && $0 rules clean && $0 rules load
                ;;

            unload)
                /sbin/iptables-save > "$libdir/cached.rules"

                iptables -P INPUT ACCEPT
                iptables -P OUTPUT ACCEPT
                iptables -P FORWARD ACCEPT
                iptables -F -t filter
                iptables -F -t nat
                iptables -F -t mangle
                iptables -F -t raw
                iptables -F -t security
                iptables -X

                echo "rules unloaded"
                ;;

            *)
                echo
                echo "usage: $myname rules { clean | compile | load | reload | unload }"
                echo
                echo "    clean   Clear the cached ruleset"
                echo "    compile Compile the rules but don't load them"
                echo "    load    Load the ruleset (compile if cached rules aren't available)"
                echo "    reload  Unload, clean, and load the ruleset"
                echo "    unload  Cached the loaded ruleset and unload it"
                echo
                exit 1
                ;;

        esac
        ;;

    role|roles)

        #
        # all actions related to role mode
        #
        if [ -h "$etcdir/role.active" ]; then
            role=$( basename $(readlink "$etcdir/role.active") )
        fi


        case $action in

            define)
                role=$3
                desc=$4

                if [ -z "$role" ]; then
                    echo
                    echo "usage: $myname $mode $action <name> <description>"
                    echo
                    echo "    name         The name of the role to create"
                    echo "    description  An optional description for the new role"
                    echo
                    exit 1
                fi

                if [ -d "$etcdir/roles/$role" ]; then
                    doerror 1 "role already exists '$role'"
                fi

                mkdir -p "$etcdir/roles/$role/zones/default/services/local" "$etcdir/roles/$role/zones/default/services/remote"
                echo "0.0.0.0/0" > "$etcdir/roles/$role/zones/default/sources"
                echo "allow" > "$etcdir/roles/$role/zones/default/default_action"
                echo "$desc" > "$etcdir/roles/$role/description"

                echo "#\n# Policy rules for role '$role'\n#\n" > "$etcdir/roles/$role/policy.rules"
                exec "${EDITOR:-/usr/bin/vi}" "$etcdir/roles/$role/policy.rules"
                ;;

            list)
                if [ ! -d "$etcdir/roles" ]; then
                    doerror 1 "roles directory $etcdir/roles doesn't exist"
                fi

                for i in $( ls -1 "$etcdir/roles"); do
                    if [ "$i" = "$role" ]; then
                        echo -n "* "
                    else
                        echo -n "  "
                    fi
                    echo $i
                done
                ;;

            set)
                newrole=$3
                if [ -z "$newrole" ]; then
                    echo
                    echo "usage: $myname $mode $action <name>"
                    echo
                    echo "    name  The name of the role to promote to the active role"
                    echo
                    exit 1
                fi

                if [ ! -d "$etcdir/roles/$newrole" ]; then
                    doerror 1 "new role $newrole doesn't exist"
                fi

                if [ -h "$etcdir/role.active" ]; then
                    rm "$etcdir/role.active"
                fi

                ln -s "roles/$newrole" "$etcdir/role.active"

                if [ -z "$role" ]; then
                    role="(none)"
                fi

                echo "role changed: $role -> $newrole"
                ;;

            get)
                if [ -z "$role" ]; then
                    doerror 1 "no active role specified"
                fi
                echo "$role"
                ;;

            undefine)
                role=$3

                if [ -z "$role" ]; then
                    echo
                    echo "usage: $myname $mode $action <name>"
                    echo
                    echo "    name  The name of the role to undefine (delete)"
                    echo
                    exit 1
                fi

                if [ ! -d "$etcdir/roles/$role" ]; then
                    doerror 1 "role hasn't been defined '$role'"
                fi

                rm -r "$etcdir/roles/$role"
                ;;

            *)
                echo
                echo "usage: $myname role { define | get | list | set | undefine }"
                echo
                echo "    define    Define a new role"
                echo "    get       Get the current role"
                echo "    list      List available roles"
                echo "    set       Set the current role"
                echo "    undefine  Undefine (delete) an existing role"
                echo
                exit 1
                ;;

        esac
        ;;

    service|services)

        #
        # All actions related to service mode
        #
        case $action in

            disable)
                type=$3
                service=$4

                if [ -z "$type" ]; then
                    echo
                    echo "usage: $myname $mode $action <type> [<zone>:]<service> [ ... ]"
                    echo
                    echo "    type     The type of service, local or remote"
                    echo "    zone     Optional zone to disable the service for (if not specified, assumes 'default' zone)"
                    echo "    service  The service to disable"
                    echo
                    exit 1
                fi

                shift; shift

                if [ ! "$type" = "local" -a ! "$type" = "remote" ]; then
                    doerror 1 "invalid service type $type, must be 'local' or 'remote'"
                fi

                if [ -z "$service" ]; then
                    doerror "no service specified"
                fi

                services=""
                while shift; do

                    if [ -z "$1" ]; then
                        break
                    fi

                    service=$1
                    zone="default"

                    if [ ! -z "$(echo $service | grep -e '.:.')" ]; then
                        zone=$(echo $service | cut -d: -f1)
                        service=$(echo $service | cut -d: -f2)
                    fi

                    if [ ! -f "$etcdir/services/$type/$service.service" ]; then
                        doerror 1 "$type service $service doesn't exist"
                    fi

                    if [ ! -d "$etcdir/role.active/zones/$zone/services/$type" ]; then
                        doerror 1 "directory $etcdir/role.active/zones/$zone/services/$type doesn't exist"
                    fi

                    if [ ! -h "$etcdir/role.active/zones/$zone/services/$type/$service.service" ]; then
                        doerror 1 "$type service $service already disabled for zone $zone"
                    fi

                    rm "$etcdir/role.active/zones/$zone/services/$type/$service.service"
                    services="$services $service"

                done

                echo "disabled $type service(s)$services"
                ;;

            enable)
                type=$3
                service=$4

                if [ -z "$type" ]; then
                    echo
                    echo "usage: $myname $mode $action <type> [<zone>:]<service> [ ... ]"
                    echo
                    echo "    type     The type of service, local or remote"
                    echo "    zone     Optional zone to enable the service for (if not specified, assumes 'default' zone)"
                    echo "    service  The service to enable"
                    echo
                    exit 1
                fi

                shift; shift

                if [ ! "$type" = "local" -a ! "$type" = "remote" ]; then
                    doerror 1 "invalid service type $type, must be 'local' or 'remote'"
                fi

                if [ -z "$service" ]; then
                    doerror 1 "no service specified"
                fi

                services=""
                while shift; do

                    if [ -z "$1" ]; then
                        break
                    fi

                    service=$1
                    zone="default"

                    if [ ! -z "$(echo $service | grep -e '.:.')" ]; then
                        zone=$(echo $service | cut -d: -f1)
                        service=$(echo $service | cut -d: -f2)
                    fi

                    if [ ! -f "$etcdir/services/$type/$service.service" ]; then
                        doerror 1 "$type service $service doesn't exist"
                    fi

                    if [ ! -d "$etcdir/role.active/zones/$zone/services/$type" ]; then
                        doerror 1 "directory $etcdir/role.active/zones/$zone/services/$type doesn't exist"
                    fi

                    if [ -h "$etcdir/role.active/zones/$zone/services/$type/$service.service" ]; then
                        doerror 1 "$type service $service already enabled for zone $zone"
                    fi

                    ln -s "$etcdir/services/$type/$service.service" "$etcdir/role.active/zones/$zone/services/$type"

                    services="$services $service"

                done

                echo "enabled $type service(s)$services"
                ;;

            list)
                zone=$3

                if [ -z "$zone" ]; then
                    zone="default"
                fi

                if [ ! -d "$etcdir/role.active/zones/$zone" ]; then
                    doerror 1 "zone not defined '$zone'"
                fi

                printf '\n%s\n' "ZONE $zone"

                printf '\n%s\n' 'LOCAL SERVICES'
                printf '%-7s%-15s%s\n\n' Active Name Description

                for i in $( find "$etcdir/services/local/" -type f -printf "%P\n" | sort ); do
                    if [ -h "$etcdir/role.active/zones/$zone/services/local/$i" ]; then
                        printf '%7s' '* '
                    else
                        echo -n "       "
                    fi

                    short=$( echo -n $i | sed s/.service// )
                    printf '%-15s' "$short"

                    if [ -x "$etcdir/services/local/$i" ]; then
                        desc=$( head -n2 "$etcdir/services/local/$i" | tail -n1 | awk -F' - ' '{print $3}' )
                    else
                        desc=$( head -n1 "$etcdir/services/local/$i" | awk -F' - ' '{print $3}' )
                    fi

                    if [ ! -z "$desc" ]; then
                        echo -n "$desc"
                    fi

                    echo
                done

                printf '\n%s\n' 'REMOTE SERVICES'
                printf '%-7s%-15s%s\n\n' Active Name Description

                for i in $( find "$etcdir/services/remote/" -type f -printf "%P\n" | sort ); do
                    if [ -h "$etcdir/role.active/zones/$zone/services/remote/$i" ]; then
                        printf '%7s' '* '
                    else
                        echo -n "       "
                    fi

                    short=$( echo -n $i | sed s/.service// )
                    printf '%-15s' "$short"

                    if [ -x "$etcdir/services/local/$i" ]; then
                        desc=$( head -n2 "$etcdir/services/local/$i" | tail -n1 | awk -F' - ' '{print $3}' )
                    else
                        desc=$( head -n1 "$etcdir/services/local/$i" | awk -F' - ' '{print $3}' )
                    fi

                    if [ ! -z "$desc" ]; then
                        echo -n "$desc"
                    fi

                    echo
                done

                echo
                ;;

            *)
                echo
                echo "usage: $myname service { disable | enable | list }"
                echo
                echo "    disable Disable a service"
                echo "    enable  Enable a service"
                echo "    list    List available services"
                echo
                ;;

        esac
        ;;

    config)

        #
        # Actions related to config mode
        #
        case $action in

            set)
                name=$3
                value=$4

                if [ -z "$name" ]; then
                    echo
                    echo "usage: $myname $mode $action <variable> <value>"
                    echo
                    echo "    variable  The name of the variable to set"
                    echo "    value     The value of the variable"
                    echo
                    exit 1
                fi

                if [ -z "$value" ]; then
                    doerror 1 "config value must be specified"
                fi

                path=$(echo $name | tr . /)
                type=$(echo $name | cut -d. -f1)

                if [ -z "$(echo $type | grep -e 'vars' -e 'core')" ]; then
                    doerror 1 "setting prefix must be 'core' or 'vars'"
                fi

                mkdir -p "$etcdir/conf/$(dirname $path)"
                echo "$value" > "$etcdir/conf/$path"
                ;;

            get)
                name=$3

                if [ -z "$name" ]; then
                    (
                        cd "$etcdir/conf"
                        for f in $(find . -type f); do
                            path=$(echo $f | cut -b3-)
                            echo $(echo $path | tr / .) = $(cat $f)
                        done
                    )
                elif [ ! -f "$etcdir/conf/$(echo $name | tr . /)" ]; then
                    doerror 1 "setting doesn't exist '$name'"
                else
                    cat "$etcdir/conf/$(echo $name | tr . /)"
                fi
                ;;

            unset)
                name=$3

                if [ -z "$name" ]; then
                    echo
                    echo "usage: $myname $mode $action <variable>"
                    echo
                    echo "    variable  The name of the variable to unset"
                    echo
                    exit 1
                fi

                if [ ! -f "$etcdir/conf/$(echo $name | tr . /)" ]; then
                    doerror 1 "setting doesn't exist '$name'"
                fi

                rm "$etcdir/conf/$(echo $name | tr . /)"
                ;;

            *)
                echo
                echo "usage: $myname config { get | set | unset }"
                echo
                echo "    get    Get the value of a specific setting, or all settings"
                echo "    set    Set the value of a setting"
                echo "    unset  Delete a setting"
                echo
                exit 1
                ;;

        esac
        ;;

    zone|zones)

        #
        # Actions related to zones
        #
        case $action in

            define)
                zone=$3
                defaction=$4
                source=$5
                desc=$6
                zonedir="$etcdir/role.active/zones/$zone"

                if [ -z "$zone" ]; then
                    echo
                    echo "usage: $myname $mode $action <name> <action> <source> [ <description> ]"
                    echo
                    echo "    name         The name of the zone to define"
                    echo "    action       The default zone policy, allow or deny"
                    echo "    source       The source host/network address of the zone"
                    echo "    description  Optional description for the zone"
                    echo
                    exit 1
                fi

                if [ -d "$zonedir" ]; then
                    doerror 1 "zone already defined '$zone'"
                fi

                if [ ! "$defaction" = "allow" -a ! "$defaction" = "deny" ]; then
                    doerror 1 "zone default action must be 'allow' or 'deny', '$defaction' specified"
                fi

                if [ -z "$source" ]; then
                    doerror 1 "zone must define a source address/network"
                fi

                mkdir -p "$zonedir/services/local" "$zonedir/services/remote"
                echo $defaction > "$zonedir/default_action"

                for src in $(echo $source); do
                    echo "$src" >> "$zonedir/sources"
                done

                if [ ! -z "$desc" ]; then
                    echo "$desc" > "$zonedir/description"
                fi
                ;;

            list)
                for zone in $(ls -1 "$etcdir/role.active/zones"); do
                    zonedir="$etcdir/role.active/zones/$zone"
                    desc=""
                    if [ -f "$zonedir/description" ]; then
                        desc=$(head -n1 "$zonedir/description")
                    fi
                    echo -n "  "
                    printf '%-15s' "$zone"
                    echo $desc
                done
                ;;

            undefine)
                zone=$3
                zonedir="$etcdir/role.active/zones/$zone"

                if [ -z "$zone" ]; then
                    echo
                    echo "usage: $myname $mode $action <name>"
                    echo
                    echo "    name The name of the zone to undefine (delete)"
                    echo
                    exit 1
                fi

                if [ ! -d "$zonedir" ]; then
                    doerror 1 "zone hasn't been defined '$zone'"
                fi

                rm -r "$zonedir"
                ;;

            *)
                echo
                echo "usage: $myname $mode { define | list | undefine }"
                echo
                echo "    define    Define a new zone"
                echo "    list      Get a list of all zones for the current roll"
                echo "    undefine  Undefine (delete) an existing zone"
                echo
                exit 1
                ;;

        esac
        ;;

    acl|acls)

        #
        # Actions related to acls
        #
        zone=$3
        location=$4
        service=$5
        servfile="$etcdir/role.active/zones/$zone/services/$location/$service.service"

        case $action in

            add)
                defaction=$6
                source=$7
                description=$8

                if [ -z "$source" ]; then
                    echo
                    echo "usage: $myname $mode $action add <zone> { local | remote } <service> { allow | deny } <source> [ <description> ]"
                    echo
                    echo "    zone     The zone the service is enable for"
                    echo "    service  The service to apply the ACL to"
                    echo "    source   The host or network address"
                    echo
                    exit 1
                fi

                servenabled $zone $location $service

                # is action valid
                [ ! "$defaction" = "allow" -a ! "$defaction" = "deny" ] \
                    && doerror 1 "invalid action specified '$defaction', must be 'allow' or 'deny'"

                echo "$defaction $source $description" >> "$servfile.acl"
                ;;

            clear)
                if [ -z "$service" ]; then
                    echo
                    echo "usage: $myname $mode $action <zone> { local | remote } <service>"
                    echo
                    echo "    zone     The zone the service is enable for"
                    echo "    service  The service to apply the acl to"
                    echo
                    exit 1
                fi
 
                servenabled $zone $location $service

                # is action valid
                [ ! "$defaction" = "allow" -a ! "$defaction" = "deny" ] \
                    && doerror 1 "invalid action specified '$defaction', must be 'allow' or 'deny'"

                # does service acl exist
                [ ! -f "$servfile.acl" ] && doerror 1 "no acl defined for $location service '$service'"

                rm "$servfile.acl"
                ;;

            del|delete)
                defaction=$6
                source=$7

                if [ -z "$source" ]; then
                    echo
                    echo "usage: $myname $mode $action <zone> { local | remote } <service> { allow | deny } <source>"
                    echo
                    echo "    zone     The zone the service is enable for"
                    echo "    service  The service to apply the acl to"
                    echo "    source   The host or network address"
                    echo
                    exit 1
                fi

                servenabled $zone $location $service

                # does service have an acl
                [ ! -f "$servfile.acl" ] && doerror 1 "no acl defined for $location service '$service'"

                cat "$servfile" | grep -e "^$defaction $source" > "$servfile.tmp" && mv "$servfile.acl.tmp" "$servfile.acl"
                ;;

            edit)
                if [ -z "$service" ]; then
                    echo
                    echo "usage: $myname $mode $action <zone> { local | remote } <service>"
                    echo
                    echo "    zone     The zone the service is enable for"
                    echo "    service  The service to list acls for"
                    echo
                    exit 1
                fi

                servenabled $zone $location $service

                exec ${EDITOR:-vi} "$servfile.acl"
                ;;

            list)
                if [ -z "$service" ]; then
                    echo
                    echo "usage: $myname $mode $action <zone> { local | remote } <service>"
                    echo
                    echo "    zone     The zone the service is enable for"
                    echo "    service  The service to list acls for"
                    echo
                    exit 1
                fi

                servenabled $zone $location $service

                # does service have an acl
                [ ! -f "$servfile.acl" ] && doerror 1 "no acl defined for $location service '$service'"

                echo
                echo "ACLS FOR $zone/$location/$service"
                echo
                cat "$servfile.acl"
                echo
                ;;

            *)
                echo
                echo "usage: $myname $mode { add | clear | delete | list }"
                echo
                echo "    add     Add an acl for a service"
                echo "    clear   Clear acl for a service"
                echo "    delete  Delete an acl for a servive"
                echo "    list    List acls for a service"
                echo
                exit 1
                ;;

        esac
        ;;

    *)
        echo "usage: $myname { acl[s] | config | role[s] | rules | service[s] | zone[s] }"
        exit 1
        ;;

esac

