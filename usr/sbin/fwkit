#!/bin/sh

myname=$( basename $0 )

etcdir=/etc/fwkit
libdir=/var/lib/fwkit

mode=$1
action=$2

if [ ! -z "$FWKIT_ETCDIR" ]; then
    etcdir=$FWKIT_ETCDIR
fi

if [ ! -z "$FWKIT_LIBDIR" ]; then
    libdir=$FWKIT_LIBDIR
fi

confload() {
    type=$1
    prefix=$2
    for i in $(find "$etcdir/conf/$type" -type f); do
        name=$(basename $i)
        eval "export $prefix$name=\"$(cat $i)\""
    done
}

confenv() {
    type=$1
    prefix=$2
    for i in $(find "$etcdir/conf/$type" -type f); do
        name=$(basename $i)
        value=$(eval echo $(cat $i))
        echo -n "$prefix$name=$value "
    done
}

confload core core_

case $mode in

    rules)

        #
        # All actions related to rules mode
        #

        case $action in

            clean)
                for i in $( ls -1 "$libdir" ); do
                    rm "$libdir/$i"
                done
	        ;;

            compile)
                if [ -f "$libdir/compile.tmp" ]; then
                    rm "$libdir/compiled.tmp"
                fi

                if [ ! -d "$etcdir" ]; then
                    echo "error: config directory $etcdir doesn't exist or isn't a directory"
                    exit 1
                fi

                if [ ! -e "$etcdir/role.active" ]; then
                    echo "error: no role specified"
                    exit 1
                fi

                # include role policy if it exists
                policy="$etcdir/role.active/policy.rules"
                if [ -f "$policy" ]; then
                    echo "#\n# $policy\n#\n" >> $libdir/compiled.tmp
                    cat "$policy" >> "$libdir/compiled.tmp"
                fi

                # include pre-service rules
                if [ -d "$etcdir/rules.d/pre" ]; then
                    for i in $( find "$etcdir/rules.d/pre" -name "*.rules" ); do
                        echo "\n#\n# $i\n#\n" >> $libdir/compiled.tmp
                        cat "$i" >> "$libdir/compiled.tmp"
                    done
                fi

                # include local service rules
                locsrv="$etcdir/role.active/services.local"
                if [ -d "$locsrv" ]; then
                    for i in $( find "$locsrv" -name "*.service" ); do
                        echo "\n#\n# $i\n#\n" >> $libdir/compiled.tmp
                        cat "$i" >> "$libdir/compiled.tmp"
                    done
                fi

                # include remote service rules
                rmtsrv="$etcdir/role.active/services.remote"
                if [ -d "$rmtsrv" ]; then
                    for i in $( find "$rmtsrv" -name "*.service" ); do
                        echo "\n#\n# $i\n#\n" >> $libdir/compiled.tmp
                        cat "$i" >> "$libdir/compiled.tmp"
                    done
                fi

                # include post-service rules
                if [ -d "$etcdir/rules.d/post" ]; then
                    for i in $( find "$etcdir/rules.d/post" -name "*.rules" ); do
                        echo "\n#\n# $i\n#\n" >> $libdir/compiled.tmp
                        cat "$i" >> "$libdir/compiled.tmp"
                    done
                fi

                if [ ! -f "$libdir/compiled.tmp" ]; then
                    echo "notice: no rules found!"
                    exit
                fi

                mv "$libdir/compiled.tmp" "$libdir/compiled.rules"

                if [ -f "$libdir/cached.rules" ]; then
                    rm "$libdir/cached.rules"
                fi

                echo "compiled rules into $libdir/compiled.rules"
                ;;

            load)

                if [ -f "$libdir/cached.rules" ]; then
                    echo -n "loading cached rules..."
                    /sbin/iptables-restore < "$libdir/cached.rules"
                    echo "done"
                else
                    if [ ! -f "$libdir/compiled.rules" ]; then
                        $0 rules compile
                    fi

                    echo -n "loading compiled rules..."

                    (
                        # get interface values
                        ip -4 -o addr | grep inet | {
                            while read def; do
                                if=$(echo $def | cut -d' ' -f2)
                                net=$(echo $def | awk '{print $4}')
                                addr=$(echo $net | cut -d/ -f1)
                                eval "export if_${if}_net=\"$net\""
                                eval "export if_${if}_addr=\"$addr\""
                            done

                            env -i $(confenv vars) $core_interpreter "$libdir/compiled.rules"
                        }
                    )

                    echo "done"
                fi
                ;;

            reload)
                $0 rules unload && $0 rules clean && $0 rules load
                ;;

            unload)
                /sbin/iptables-save > "$libdir/cached.rules"

                iptables -P INPUT ACCEPT
                iptables -P OUTPUT ACCEPT
                iptables -P FORWARD ACCEPT
                iptables -F -t filter
                iptables -F -t nat
                iptables -F -t mangle
                iptables -F -t raw
                iptables -F -t security
                iptables -X

                echo "rules unloaded"
                ;;

            *)
                echo
                echo "usage: $myname rules { action }"
                echo
                echo "Available actions:"
                echo
                echo "    clean   Clear the cached ruleset"
                echo "    compile Compile the rules but don't load them"
                echo "    load    Load the ruleset (compile if cached rules aren't available)"
                echo "    reload  Unload, clean, and load the ruleset"
                echo "    unload  Cached the loaded ruleset and unload it"
                echo
                exit 1
                ;;

        esac
        ;;

    role|roles)

        #
        # all actions related to role mode
        #

        if [ -h "$etcdir/role.active" ]; then
            role=$( basename $(readlink "$etcdir/role.active") )
        fi


        case $action in

            list)
                if [ ! -d "$etcdir/roles" ]; then
                    echo "error: roles directory $etcdir/roles doesn't exist"
                    exit 1
                fi

                for i in $( ls -1 "$etcdir/roles"); do
                    if [ "$i" = "$role" ]; then
                        echo -n "* "
                    else
                        echo -n "  "
                    fi
                    echo $i
                done

                ;;

            set)
                newrole=$3
                if [ -z "$newrole" ]; then
                    echo "error: no new role specified"
                    exit 1
                fi

                if [ ! -d "$etcdir/roles/$newrole" ]; then
                    echo "error: new role $newrole doesn't exist"
                    exit 1
                fi

                if [ -h "$etcdir/role.active" ]; then
                    rm "$etcdir/role.active"
                fi

                ln -s "roles/$newrole" "$etcdir/role.active"

                if [ -z "$role" ]; then
                    role="(none)"
                fi

                echo "role changed: $role -> $newrole"
                ;;

            get)
                if [ -z "$role" ]; then
                    echo "error: no active role specified"
                    exit 1
                fi
                echo "$role"
                ;;

            *)
                echo
                echo "usage: $myname role { action }"
                echo
                echo "Available actions:"
                echo
                echo "    get     Get the current role"
                echo "    list    List available roles"
                echo "    set     Set the current role"
                echo
                exit 1
                ;;

        esac
        ;;

    service|services)

        #
        # All actions related to service mode
        #

        case $action in

            disable)

                type=$3
                service=$4

                shift; shift

                if [ ! "$type" = "local" -a ! "$type" = "remote" ]; then
                    echo "error: invalid service type $type, must be 'local' or 'remote'"
                    exit 1
                fi

                if [ -z "$service" ]; then
                    echo "error: no service specified"
                    exit 1
                fi

                services=""
                while shift; do

                    if [ -z "$1" ]; then
                        break
                    fi

                    service=$1

                    if [ ! -f "$etcdir/services/$type/$service.service" ]; then
                        echo "error: $type service $service doesn't exist"
                        exit 1
                    fi

                    if [ ! -d "$etcdir/role.active/services.$type" ]; then
                        echo "error: directory $etcdir/role.active/services.$type doesn't exist"
                        exit 1
                    fi

                    if [ ! -h "$etcdir/role.active/services.$type/$service.service" ]; then
                        echo "$type service $service already disabled"
                        exit
                    fi

                    rm "$etcdir/role.active/services.$type/$service.service"
                    services="$services $service"

                done

                echo "disabled $type service(s)$services"

                ;;

            enable)

                type=$3
                service=$4

                shift; shift

                if [ ! "$type" = "local" -a ! "$type" = "remote" ]; then
                    echo "error: invalid service type $type, must be 'local' or 'remote'"
                    exit 1
                fi

                if [ -z "$service" ]; then
                    echo "error: no service specified"
                    exit 1
                fi

                services=""
                while shift; do

                    if [ -z "$1" ]; then
                        break
                    fi

                    service=$1

                    if [ ! -f "$etcdir/services/$type/$service.service" ]; then
                        echo "error: $type service $service doesn't exist"
                        exit 1
                    fi

                    if [ ! -d "$etcdir/role.active/services.$type" ]; then
                        echo "error: directory $etcdir/role.active/services.$type doesn't exist"
                        exit 1
                    fi

                    if [ -h "$etcdir/role.active/services.$type/$service.service" ]; then
                        echo "$type service $service already enabled"
                        exit
                    fi

                    ln -s "../../../services/$type/$service.service" "$etcdir/role.active/services.$type"

                    services="$services $service"

                done

                echo "enabled $type service(s)$services"

                ;;

            list)

                printf '\n%s\n' 'LOCAL SERVICES'
                printf '%-7s%-15s%s\n\n' Active Name Description

                for i in $( ls -1 "$etcdir/services/local" ); do
                    if [ -h "$etcdir/role.active/services.local/$i" ]; then
                        printf '%7s' '* '
                    else
                        echo -n "       "
                    fi

                    short=$( echo -n $i | sed s/.service// )
                    printf '%-15s' "$short"

                    desc=$( head -n1 "$etcdir/services/local/$i" | awk -F' - ' '{print $3}' )

                    if [ ! -z "$desc" ]; then
                        echo -n "$desc"
                    fi

                    echo
                done

                printf '\n%s\n' 'REMOTE SERVICES'
                printf '%-7s%-15s%s\n\n' Active Name Description

                for i in $( ls -1 "$etcdir/services/remote" ); do
                    if [ -h "$etcdir/role.active/services.remote/$i" ]; then
                        printf '%7s' '* '
                    else
                        echo -n "       "
                    fi

                    short=$( echo -n $i | sed s/.service// )
                    printf '%-15s' "$short"

                    desc=$( head -n1 "$etcdir/services/remote/$i" | awk -F' - ' '{print $3}' )

                    if [ ! -z "$desc" ]; then
                        echo -n "$desc"
                    fi

                    echo
                done

                echo

                ;;

            *)
                echo
                echo "usage: $myname service { action }"
                echo
                echo "Available actions:"
                echo
                echo "    disable Disable a service"
                echo "    enable  Enable a service"
                echo "    list    List available services"
                echo
                ;;

        esac

        ;;

    config)

        #
        # Actions related to config mode
        #

        case $action in

            set)
                name=$3
                value=$4

                if [ -z "$name" ]; then
                    echo "error: config setting must be specified"
                    exit 1
                fi

                if [ -z "$value" ]; then
                    echo "error: config value must be specified"
                    exit 1
                fi

                path=$(echo $name | tr . /)
                type=$(echo $name | cut -d. -f1)

                if [ -z "$(echo $type | grep -e 'vars' -e 'core')" ]; then
                    echo "error: setting prefix must be 'core' or 'vars'"
                    exit 1
                fi

                mkdir -p "$etcdir/conf/$(dirname $path)"
                echo "$value" > "$etcdir/conf/$path"
                ;;

            get)
                name=$3

                if [ -z "$name" ]; then
                    (
                        cd "$etcdir/conf"
                        for f in $(find . -type f); do
                            path=$(echo $f | cut -b3-)
                            echo $(echo $path | tr / .) = $(cat $f)
                        done
                    )
                elif [ ! -f "$etcdir/conf/$(echo $name | tr . /)" ]; then
                    echo "error: setting doesn't exist '$name'"
                    exit 1
                else
                    cat "$etcdir/conf/$(echo $name | tr . /)"
                fi
                ;;

            unset)
                name=$3

                if [ ! -f "$etcdir/conf/$(echo $name | tr . /)" ]; then
                    echo "error: setting doesn't exist '$name'"
                    exit 1
                fi

                rm "$etcdir/conf/$(echo $name | tr . /)"
                ;;

            *)
                echo
                echo "usage: $myname config { action }"
                echo
                echo "    get    Get the value of a specific setting, or all settings"
                echo "    set    Set the value of a setting"
                echo "    unset  Delete a setting"
                echo
                exit 1
                ;;

        esac
        ;;

    *)
        echo "usage: $myname { role | rules | service }"
        exit 1
        ;;

esac

