#!/bin/sh
#
# fwkit - A modular approach to iptables-based firewall rulesets
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/fwkit/blob/master/License.txt
#

version="develop"

myname=$( basename $0 )

etcdir=/etc/fwkit
libdir=/var/lib/fwkit

mode=$1
action=$2

if [ ! -z "$FWKIT_ETCDIR" ]; then
    etcdir=$FWKIT_ETCDIR
fi

if [ ! -z "$FWKIT_LIBDIR" ]; then
    libdir=$FWKIT_LIBDIR
fi

doerror() {
    echo "error: $2" 1>&2
    exit $1
}

donotice() {
    echo "notice: $1" 1>&2
}

cd "$etcdir"

case $mode in

    -v)
        #
        # Output version
        #
        echo fwkit version $version
        ;;

    rules)

        #
        # All actions related to rules mode
        #
        case $action in

            clean)
                for i in $( ls -1 "$libdir" ); do
                    rm "$libdir/$i"
                done
	        ;;

            compile)
                if [ -f "$libdir/compile.tmp" ]; then
                    rm "$libdir/compiled.tmp"
                fi

                if [ ! -d "$etcdir" ]; then
                    doerror 1 "config directory $etcdir doesn't exist or isn't a directory"
                fi

                if [ ! -e "$etcdir/role.active" ]; then
                    doerror 1 "no role specified"
                fi

                exec 3<> "$libdir/unload.tmp"
                fwk-rules >"$libdir/compiled.tmp"

                if [ ! $? = 0 ]; then
                    doerror 2 "failed to compile rules"
                fi

                mv "$libdir/compiled.tmp" "$libdir/compiled.rules"
                mv "$libdir/unload.tmp" "$libdir/unload.rules"
                chmod +x "$libdir/compiled.rules" "$libdir/unload.rules"

                if [ -f "$libdir/cached.rules" ]; then
                    rm "$libdir/cached.rules"
                fi

                echo "compiled rules into $libdir/compiled.rules"
                ;;

            load)
                if [ -f "$libdir/cached.rules" ]; then
                    echo -n "loading cached rules..."
                    /sbin/iptables-restore < "$libdir/cached.rules"
                    echo "done"
                else
                    if [ ! -f "$libdir/compiled.rules" ]; then
                        $0 rules compile
                    fi

                    echo -n "loading compiled rules..."

                    (
                        # get interface values
                        ip -4 -o addr | grep inet | {
                            while read def; do
                                if=$(echo $def | cut -d' ' -f2)
                                net=$(echo $def | awk '{print $4}')
                                addr=$(echo $net | cut -d/ -f1)
                                eval "export if_${if}_net=\"$net\""
                                eval "export if_${if}_addr=\"$addr\""
                            done

                            FWKIT_ETCDIR="$FWKIT_ETCDIR" FWKIT_LIBDIR="$FWKIT_LIBDIR" fwkit="$0" fwk-config exec $core_interpreter "$libdir/compiled.rules"
                        }
                    )

                    echo "done"
                fi
                ;;

            reload)
                $0 rules unload && $0 rules clean && $0 rules load
                ;;

            unload)
                /sbin/iptables-save > "$libdir/cached.rules"

                if [ -f "$libdir/unload" ]; then
                    /bin/sh "$libdir/unload.rules"
                else
                    iptables -P INPUT ACCEPT
                    iptables -P OUTPUT ACCEPT
                    iptables -P FORWARD ACCEPT
                    iptables -F -t filter
                    iptables -F -t nat
                    iptables -F -t mangle
                    iptables -F -t raw
                    iptables -F -t security
                    iptables -X

                    ip6tables -P INPUT ACCEPT
                    ip6tables -P OUTPUT ACCEPT
                    ip6tables -P FORWARD ACCEPT
                    ip6tables -F -t filter
                    ip6tables -F -t nat
                    ip6tables -F -t mangle
                    ip6tables -F -t raw
                    ip6tables -F -t security
                    ip6tables -X
                fi

                echo "rules unloaded"
                ;;

            *)
                echo "\nusage: $myname rules { clean | compile | load | reload | unload }\n"
                echo "    clean   Clear the cached ruleset"
                echo "    compile Compile the rules but don't load them"
                echo "    load    Load the ruleset (compile if cached rules aren't available)"
                echo "    reload  Unload, clean, and load the ruleset"
                echo "    unload  Cached the loaded ruleset and unload it\n"
                exit 1
                ;;

        esac
        ;;

    role|roles)

        #
        # all actions related to role mode
        #
        if [ -h "$etcdir/role.active" ]; then
            role=$( basename $(readlink "$etcdir/role.active") )
        fi


        case $action in

            define)
                role=$3
                policy=$4
                desc=$5

                if [ -z "$role" ]; then
                    echo "\nusage: $myname $mode $action <name> [ allow | deny ] [ <description> ]\n"
                    echo "    name         The name of the role to create"
                    echo "    description  An optional description for the new role\n"
                    echo "    By default, roles use a deny policy unless specified while defining it.\n"
                    exit 1
                fi

                if [ ! -z "$(fwk-role list | grep "^$role\$")" ]; then
                    doerror 1 "role already exists '$role'"
                fi

                fwk-role define "$role" "$desc"
                mkdir -p "$etcdir/roles/$role/zones/default/services/local" "$etcdir/roles/$role/zones/default/services/remote"
                echo "0.0.0.0/0" > "$etcdir/roles/$role/zones/default/sources"
                echo "$policy" > "$etcdir/roles/$role/policy"
                echo "$desc" > "$etcdir/roles/$role/description"
                ;;

            list)
                if [ ! -d "$etcdir/roles" ]; then
                    doerror 1 "roles directory $etcdir/roles doesn't exist"
                fi

                for i in $( ls -1 "$etcdir/roles"); do
                    if [ "$i" = "$role" ]; then
                        echo -n "* "
                    else
                        echo -n "  "
                    fi
                    echo $i
                done
                ;;

            set)
                newrole=$3
                if [ -z "$newrole" ]; then
                    echo "\nusage: $myname $mode $action <name>\n"
                    echo "    name  The name of the role to promote to the active role\n"
                    exit 1
                fi

                if [ ! -d "$etcdir/roles/$newrole" ]; then
                    doerror 1 "new role $newrole doesn't exist"
                fi

                if [ -h "$etcdir/role.active" ]; then
                    rm "$etcdir/role.active"
                fi

                ln -s "roles/$newrole" "$etcdir/role.active"

                if [ -z "$role" ]; then
                    role="(none)"
                fi

                echo "role changed: $role -> $newrole"
                ;;

            get)
                if [ -z "$role" ]; then
                    doerror 1 "no active role specified"
                fi
                echo "$role"
                ;;

            undefine)
                role=$3

                if [ -z "$role" ]; then
                    echo "\nusage: $myname $mode $action <name>\n"
                    echo "    name  The name of the role to undefine (delete)\n"
                    exit 1
                fi

                if [ ! -d "$etcdir/roles/$role" ]; then
                    doerror 1 "role hasn't been defined '$role'"
                fi

                rm -r "$etcdir/roles/$role"
                ;;

            *)
                echo "\nusage: $myname role { define | get | list | set | undefine }\n"
                echo "    define    Define a new role"
                echo "    get       Get the current role"
                echo "    list      List available roles"
                echo "    set       Set the current role"
                echo "    undefine  Undefine (delete) an existing role\n"
                exit 1
                ;;

        esac
        ;;

    service|services)

        #
        # All actions related to service mode
        #
        case $action in

            apply)
                zone=$3
                type=$4
                service=$5
                acl=$6

                if [ -z "$acl" ]; then
                    echo "\nusage: $myname $mode $action <zone> { local | remote } <service> <acl>\n"
                    echo "    acl      The name of the ACL to apply"
                    echo "    service  The service to apply the ACL to"
                    echo "    zone     Zone the service is enabled for"
                    exit 1
                fi

                fwk-service apply "$zone" "$type" "$service" "$acl"
                ;;

            clear)
                zone=$3
                type=$4
                service=$5

                if [ -z "$service" ]; then
                    echo "\nusage: $myname $mode $action <zone> { local | remote } <service>\n"
                    echo "    service  The service to clear the ACL from"
                    echo "    zone     Zone the service is enabled for"
                    exit 1
                fi

                fwk-service clear "$zone" "$type" "$service"
                ;;

            disable)
                type=$3
                service=$4

                if [ -z "$type" ]; then
                    echo "\nusage: $myname $mode $action { local | remote } [<zone>:]<service> [ ... ]\n"
                    echo "    zone     Optional zone to disable the service for (if not specified, assumes 'default' zone)"
                    echo "    service  The service to disable\n"
                    exit 1
                fi

                shift; shift

                if [ ! "$type" = "local" -a ! "$type" = "remote" ]; then
                    doerror 1 "invalid service type $type, must be 'local' or 'remote'"
                fi

                if [ -z "$service" ]; then
                    doerror "no service specified"
                fi

                services=""
                while shift; do

                    if [ -z "$1" ]; then
                        break
                    fi

                    service=$1
                    zone="default"

                    if [ ! -z "$(echo $service | grep -e '.:.')" ]; then
                        zone=$(echo $service | cut -d: -f1)
                        service=$(echo $service | cut -d: -f2)
                    fi

                    fwk-service delete "$zone" "$type" "$service"

                    services="$services $service"

                done

                echo "disabled $type service(s)$services"
                ;;

            enable)
                type=$3
                service=$4

                if [ -z "$type" ]; then
                    echo "\nusage: $myname $mode $action { local | remote } [<zone>:]<service> [ ... ]\n"
                    echo "    zone     Optional zone to enable the service for (if not specified, assumes 'default' zone)"
                    echo "    service  The service to enable\n"
                    exit 1
                fi

                shift; shift

                if [ ! "$type" = "local" -a ! "$type" = "remote" ]; then
                    doerror 1 "invalid service type $type, must be 'local' or 'remote'"
                fi

                if [ -z "$service" ]; then
                    doerror 1 "no service specified"
                fi

                services=""
                while shift; do

                    if [ -z "$1" ]; then
                        break
                    fi

                    service=$1
                    zone="default"

                    if [ ! -z "$(echo $service | grep -e '.:.')" ]; then
                        zone=$(echo $service | cut -d: -f1)
                        service=$(echo $service | cut -d: -f2)
                    fi

                    srvfile="$etcdir/services/$type/$service.service"
                    if [ -x "$srvfile" ]; then
                        "$srvfile" "$zone" "$type" | fwk-service add "$zone" "$type" "$service"
                        services="$services $service"
                    elif [ ! -r "$srvfile" ]; then
                        donotice "ignoring non-existent service $zone.$type.$service"
                    else
                        fwk-service add "$zone" "$type" "$service" < "$etcdir/services/$type/$service.service"
                        services="$services $service"
                    fi

                done

                echo "enabled $type service(s)$services"
                ;;

            list)
                zone=$3

                if [ -z "$zone" ]; then
                    zone="default"
                fi

                if [ ! -d "$etcdir/role.active/zones/$zone" ]; then
                    doerror 1 "zone not defined '$zone'"
                fi

                printf '\n%s\n' "ZONE $zone"

                printf '\n%s\n' 'LOCAL SERVICES'
                printf '%-7s%-15s%s\n\n' Active Name Description

                for i in $( find "$etcdir/services/local/" -type f -printf "%P\n" | sort ); do
                    if [ -e "$etcdir/role.active/zones/$zone/services/local/$i" ]; then
                        printf '%7s' '* '
                    else
                        echo -n "       "
                    fi

                    short=$( echo -n $i | sed s/.service// )
                    printf '%-15s' "$short"

                    if [ -x "$etcdir/services/local/$i" ]; then
                        desc=$( head -n2 "$etcdir/services/local/$i" | tail -n1 | awk -F' - ' '{print $3}' )
                    else
                        desc=$( head -n1 "$etcdir/services/local/$i" | awk -F' - ' '{print $3}' )
                    fi

                    if [ ! -z "$desc" ]; then
                        echo -n "$desc"
                    fi

                    echo
                done

                printf '\n%s\n' 'REMOTE SERVICES'
                printf '%-7s%-15s%s\n\n' Active Name Description

                for i in $( find "$etcdir/services/remote/" -type f -printf "%P\n" | sort ); do
                    if [ -e "$etcdir/role.active/zones/$zone/services/remote/$i" ]; then
                        printf '%7s' '* '
                    else
                        echo -n "       "
                    fi

                    short=$( echo -n $i | sed s/.service// )
                    printf '%-15s' "$short"

                    if [ -x "$etcdir/services/local/$i" ]; then
                        desc=$( head -n2 "$etcdir/services/local/$i" | tail -n1 | awk -F' - ' '{print $3}' )
                    else
                        desc=$( head -n1 "$etcdir/services/local/$i" | awk -F' - ' '{print $3}' )
                    fi

                    if [ ! -z "$desc" ]; then
                        echo -n "$desc"
                    fi

                    echo
                done

                echo
                ;;

            show)
                zone=$3
                type=$4
                service=$5

                if [ -z "$service" ]; then
                    echo "\nusage: $myname $mode $action <zone> { local | remote } <service>\n"
                    echo "    service  The service to clear the ACL from"
                    echo "    zone     Zone the service is enabled for"
                    exit 1
                fi

                path=$(fwk-service path "$zone" "$type" "$service")

                if [ ! $? = 0 ]; then
                    exit $?
                fi

                if [ -x "$path" ]; then
                    desc=$( head -n2 "$path" | tail -n1 | awk -F' - ' '{print $3}' )
                else
                    desc=$( head -n1 "$path" | awk -F' - ' '{print $3}' )
                fi

                echo "\nSERVICE $zone/$type/$service\n"
                echo "$desc\n"

                acl=$(fwk-service acl "$zone" "$type" "$service" 2>/dev/null)
                if [ ! -z "$acl" ]; then
                   echo "ACL $acl\n"
                fi
                ;;

            *)
                echo "\nusage: $myname service { apply | clear | disable | enable | list | show }\n"
                echo "    apply    Apply an ACL to a service"
                echo "    clear    Clear an applied ACL from a service"
                echo "    disable  Disable a service"
                echo "    enable   Enable a service"
                echo "    list     List available services\n"
                echo "    show     Show service details\n"
                ;;

        esac
        ;;

    config)

        #
        # Actions related to config mode
        #
        case $action in

            set)
                name=$3
                value=$4

                if [ -z "$name" ]; then
                    echo "\nusage: $myname $mode $action <variable> <value>\n"
                    echo "    variable  The name of the variable to set"
                    echo "    value     The value of the variable\n"
                    exit 1
                fi

                if [ -z "$value" ]; then
                    doerror 1 "config value must be specified"
                fi

                echo "$value" | fwk-config write "$name"
                ;;

            get)
                name=$3

                if [ -z "$name" ]; then
                    fwk-config list
                else
                    fwk-config read "$name"
                fi
                ;;

            unset)
                name=$3

                if [ -z "$name" ]; then
                    echo "\nusage: $myname $mode $action <variable>\n"
                    echo "    variable  The name of the variable to unset\n"
                    exit 1
                fi

                fwk-config delete "$name"
                ;;

            *)
                echo "\nusage: $myname config { get | set | unset }\n"
                echo "    get    Get the value of a specific setting, or all settings"
                echo "    set    Set the value of a setting"
                echo "    unset  Delete a setting\n"
                exit 1
                ;;

        esac
        ;;

    zone|zones)

        #
        # Actions related to zones
        #
        case $action in

            define)
                zone=$3
                source=$4
                desc=$5

                if [ -z "$zone" ]; then
                    echo "\nusage: $myname $mode $action <name> <source> [ <description> ]\n"
                    echo "    name         The name of the zone to define"
                    echo "    source       The source host/network address of the zone"
                    echo "    description  Optional description for the zone\n"
                    exit 1
                fi

                echo "$source" | fwk-zone define "$zone" "$description"
                ;;

            list)
                printf '  %-15s%-30s%s\n' "Zone Name" "Description" "Source(s)"
                for zone in $(fwk-zone list); do
                    zonedir="$etcdir/role.active/zones/$zone"
                    src=""
                    if [ -f "$zonedir/sources" ]; then
                        src=$(for i in `cat "$zonedir/sources"`; do echo -n "$i "; done)
                    fi
                    desc=""
                    if [ -f "$zonedir/description" ]; then
                        desc=$(head -n1 "$zonedir/description")
                    fi
                    printf '  %-15s%-30s%s\n' "$zone" "$desc" "$src"
                done
                ;;

            undefine)
                zone=$3

                if [ -z "$zone" ]; then
                    echo "\nusage: $myname $mode $action <name>\n"
                    echo "    name The name of the zone to undefine (delete)\n"
                    exit 1
                fi

                fwk-zone undefine "$zone"
                ;;

            *)
                echo "\nusage: $myname $mode { define | list | undefine }\n"
                echo "    define    Define a new zone"
                echo "    list      Get a list of all zones for the current roll"
                echo "    undefine  Undefine (delete) an existing zone\n"
                exit 1
                ;;

        esac
        ;;

    acl|acls)

        #
        # Actions related to acls
        #
        name=$3

        case $action in

            def|define)
                defaction="deny"

                if [ ! -z "$4" ]; then
                    defaction=$4
                fi

                if [ -z "$name" ]; then
                    echo "\nusage: $myname $mode $action <name> [ allow | deny ]\n"
                    echo "    name  The name of the ACL"
                    exit 1
                fi

                if [ ! "$defaction" = "allow" -a ! "$defaction" = "deny" ]; then
                    doerror 2 "default action must be 'allow' or 'deny', '$defaction' given"
                fi

                if (fwk-acl path "$name" 2>1 >/dev/null); then
                    doerror 1 "ACL already exists: $name"
                fi

                tf=$(mktemp /tmp/fwkit.acl.XXXXXXXX)

                cat <<EOF | sed -E 's/^\s+//' > "$tf"
                    # Add ACL entries, one per line.
                    #
                    # Fields are: [action] [IP address] [description]
                    #
                    # The description field can contain spaces.
                    #
                    # e.g. allow 192.168.0.5 Block this host
EOF

                ${EDITOR:-vi} "$tf"
                grep -v -e '^#' -e '^$' < "$tf" | fwk-acl write "$name" "$defaction"
                rm "$tf"
                ;;

            edit)
                if [ -z "$name" ]; then
                    echo "\nusage: $myname $mode $action <name>\n"
                    echo "    name  The name of the ACL\n"
                    exit 1
                fi

                if ! (fwk-acl path "$name"); then
                    exit 1
                fi

                tf=$(mktemp /tmp/fwkit.acl.XXXXXXXX)
                defaction=$(fwk-acl read "$name" | head -n1 | cut -d\  -f2)
                fwk-acl read "$name" | tail -n+2 > "$tf"
                ${EDITOR:-vi} "$tf"
                grep -v -e '^#' -e '^$' < "$tf" | fwk-acl write "$name" "$defaction"
                rm "$tf"
                ;;

            list)
                fwk-acl list
                ;;

            show)
                if [ -z "$name" ]; then
                    echo "\nusage: $myname $mode $action <name>\n"
                    echo "    name  The name of the ACL"
                    exit 1
                fi

                if ! (fwk-acl path "$name"); then
                    exit 1
                fi

                echo "\nACL $name"
                printf '\n%-7s%-45s%s\n\n' "Action" "Source" "Description"
                (fwk-acl read "$name" | grep -v -e '^default') | { while read line; do
                    aclaction=$(echo $line | awk '{print $1}')
                    source=$(echo $line | awk '{print $2}')
                    description=$(echo $line | awk '{$1=$2=""; print $0}' | sed -r 's/^\s+//')
                    printf '%-7s%-45s%s\n' "$aclaction" "$source" "$description"
                done } 
                echo "\nDefault action: $(fwk-acl read "$name" | head -n1 | cut -d\  -f2)\n"
                ;;

            undef|undefine)
                if [ -z "$name" ]; then
                    echo "\nusage: $myname $mode $action <name>\n"
                    echo "    name  The name of the ACL"
                    exit 1
                fi

                fwk-acl delete "$name"
                ;;

            *)
                echo "\nusage: $myname $mode { define | edit | list | show | undefine }\n"
                echo "    define    Define an ACL"
                echo "    edit      Launch an editor to edit ACL entries"
                echo "    list      List all the defined ACLs"
                echo "    show      Show ACL for a service\n"
                echo "    undefine  Delete an ACL for a servive"
                exit 1
                ;;

        esac
        ;;

    *)
        echo "usage: $myname { acl[s] | config | role[s] | rules | service[s] | zone[s] }"
        exit 1
        ;;

esac

